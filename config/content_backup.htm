<h1>倉儲</h1>
<p><strong>The website is <a href="https://github.com/50733146/lkh-1">https://github.com/50733146/lkh-1</a></strong></p>
<p><strong>source: <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></strong></p>
<p><strong>#branch 林冠澔 (Lin,Kuan,Hao) <img alt="cool" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-cool.gif"/></strong></p>
<h1>2021</h1>
<h2>2021.03.02</h2>
<p><strong>sign up the warehousing</strong></p>
<h2>2021.03.04</h2>
<p><span style="color: #000000;"><strong>add ssh keys to <a href="https://github.com/settings/keys" style="color: #000000;">https://github.com/settings/keys</a></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js plain">1.建立 OpenSSH key   </code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js plain"># pair ssh-keygen -t rsa -b 4096 -C </code><code class="js string">"使用者學號"</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">2.Putty 作為 SSH 連線客戶端工具</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string"># <a href="https://www.putty.org/" style="color: #000000;">https://www.putty.org/</a></code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">3.以 SSH 協定與 Github 連線</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">建立一對 OpenSSH key pair, private key 保留在近端, 將 public key 登記在 Github 所屬帳號設定中</code></strong></span></p>
<p><span style="color: #000000;"><strong># set GIT_SSH=%Disk%:\putty\plink.exe</strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">表示 git 將透過 putty 工具以 ssh 加密協定對 Github 連線</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">4.利用 SSH 對 Gitlab 連線</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">將OpenSSH 格式的 public key 登錄到 Gitlab 帳號下</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">利用 putty.exe 建立 session 名稱為 github.com 的設定, 其中設定 AUTH 與 Proxy 資料</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">在.git/config 以url = git@gitlab.com:user_name/url 對 gitlab 連接</code></strong></span></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>ssh:網路連線加密機制,可以利用 ssh 帳號@遠端主機 ip 或符號名稱, 就可以輸入認證密碼, 登入到遠端主機,無須提供密碼認證</strong></p>
<p><strong><img alt="" height="435" src="https://50733146.github.io/lkh/images/chrome_47BWqXIGHn.png" width="949"/></strong></p>
<h2>2021.03.11</h2>
<p><strong>git pull origin master</strong></p>
<p><strong>1.acp.bat 2.cms.bat 3.http-serve.py 4.localhost.crt 5.localhost.key move to LKH</strong></p>
<p><strong>Reference: <a href="https://cythilya.github.io/2018/06/19/git-merge-branch-into-master/">https://cythilya.github.io/2018/06/19/git-merge-branch-into-master/</a></strong></p>
<p><strong>acp.bat:已接將git add . 、git commit -m "message"、git push 合併</strong></p>
<p><strong>cms.bat:已將cd cmsimde、python wsgi.py 合併</strong></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>acp.bat、cms.bat將指令精簡化</strong></p>
<p><br/><strong><img alt="" height="476" src="https://50733146.github.io/lkh/images/cmd_iJ7Yg869GA.png" width="803"/></strong></p>
<h2>2021.04.28</h2>
<p><strong>建立Windows系統與Ubuntu系統 </strong></p>
<p><strong>1.Windows 10專業版</strong></p>
<p><strong>開機後的網路設置-IPv6</strong><br/><strong>名稱：kmollab</strong></p>
<p><strong>2.Ubuntu server 20.04-1</strong></p>
<p><strong>開機後的網路設置-IPv6</strong></p>
<p><strong>DNS設置-系上配置</strong></p>
<p><strong>名稱：kmol</strong></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>*預計建立虛擬主機，開機時自動開啟動態、靜態網站</strong></p>
<h2>2021.05.13</h2>
<p><strong>自行利用 Ubuntu 建立可啟動 CMSiMDE 動態系統與 Fossil SCM 伺服器的目的</strong></p>
<h2>2021.07.01</h2>
<ol>
<li><strong>建立 Heroku 帳號</strong></li>
<li><strong>建立 Heroku app</strong></li>
<li><strong>下載 Heroku CLI 程式檔案, 解開至隨身碟 Y: 所在位置或</strong></li>
<li><strong>修改命令搜尋路徑 --在start.bat中加入:</strong>
<ul style="list-style-type: disc;">
<li><strong><code class="py functions"></code><code class="py functions">set</code> <code class="py plain">path_heroku</code><code class="py keyword">=</code><code class="py keyword">%</code><code class="py plain">Disk</code><code class="py keyword">%</code><code class="py plain">:\heroku\</code><code class="py functions">bin</code><code class="py plain">;</code><code class="py plain"></code></strong></li>
<li><strong><code class="py plain">path<code class="py keyword">=%<code class="py plain">path_heroku</code><code class="py keyword">%</code><code class="py plain">;</code></code></code></strong></li>
<li><strong><code class="py functions">set</code> <code class="py plain">HTTP_PROXY</code><code class="py keyword">=</code><code class="py plain">http:</code><code class="py keyword">/</code><code class="py keyword">/</code><code class="py plain">[</code><code class="py value">2001</code><code class="py plain">:</code><code class="py value">288</code><code class="py plain">:</code><code class="py value">6004</code><code class="py plain">:</code><code class="py value">17</code><code class="py plain">::</code><code class="py value">53</code><code class="py plain">]:</code><code class="py value">3128</code></strong></li>
<li><strong><code class="py functions"></code><code class="py functions">set</code> <code class="py plain">HTTPS_PROXY</code><code class="py keyword">=</code><code class="py plain">http:</code><code class="py keyword">/</code><code class="py keyword">/</code><code class="py plain">[</code><code class="py value">2001</code><code class="py plain">:</code><code class="py value">288</code><code class="py plain">:</code><code class="py value">6004</code><code class="py plain">:</code><code class="py value">17</code><code class="py plain">::</code><code class="py value">53</code><code class="py plain">]:</code><code class="py value">3128</code></strong></li>
</ul>
</li>
<li><strong>測試 Heroku </strong>
<ul style="list-style-type: disc;">
<li><strong>#heroku --version</strong></li>
</ul>
</li>
<li><strong>設定 Heroku 代理主機</strong>
<ul style="list-style-type: disc;">
<li><strong>#heroku login -i</strong></li>
</ul>
</li>
<li><strong>設定同步倉儲,進到倉儲位置下 </strong>
<ul style="list-style-type: disc;">
<li><strong>#heroku git:remote -a "heroku app name"</strong></li>
</ul>
</li>
<li><strong>以 git 進行提交推送 </strong>
<ul style="list-style-type: disc;">
<li><strong>#git push heroku </strong></li>
</ul>
</li>
</ol>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>過程中</strong></p>
<ul>
<li><strong>提交推送 #Failed to connect to github.com </strong></li>
</ul>
<p><strong>解決</strong></p>
<ul>
<li><strong><code>git config --global --unset <code class="py plain">HTTP_PROXY<br/></code></code></strong></li>
<li><code><strong>git config --global --unset <code class="py plain">HTTPS_PROXY</code><code class="py plain"><br/></code></strong></code></li>
</ul>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>之後heroku login，可直接push heroku同步到 <a href="https://git.heroku.com/lkh-1.git">https://git.heroku.com/lkh-1.git</a></strong></p>
<p><b>Heroku website: <a href="https://dashboard.heroku.com/apps/lkh-1">https://dashboard.heroku.com/apps/lkh-1</a></b></p>
<h2>2021.07.02</h2>
<p><strong>在 <a href="https://github.com/50733146/lkh-1">https://github.com/50733146/lkh-1</a> 中的README.md 使用svg檔</strong></p>
<p><strong>將 <a href="https://50733146.github.io/lkh-1/">https://50733146.github.io/lkh-1/</a> 連結納入</strong></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><b>使用 <a href="https://wordpress.com/">WordPress</a> 建立網站 </b></p>
<p><b>website: <a href="https://lkh125275799.wordpress.com/">https://lkh125275799.wordpress.com/</a></b></p>
<h2>2021.07.03</h2>
<p><strong>測試 github command 與github desktop</strong></p>
<p><b>git: <a href="https://git-scm.com/">https://git-scm.com/</a></b></p>
<p><a href="https://github.com/git-for-windows/git/releases/download/v2.32.0.windows.1/Git-2.32.0-64-bit.exe"><span style="text-decoration: underline; background-color: #008000; color: #ffffff;"><b>Download↓</b></span></a></p>
<p><span style="background-color: #ffffff; color: #000000;"><b>github desktop: <a href="https://desktop.github.com/">https://desktop.github.com/</a></b></span></p>
<p><span style="text-decoration: underline;"><a href="https://central.github.com/deployments/desktop/desktop/latest/win32"><b><span style="color: #ffffff; background-color: #008000; text-decoration: underline;">Download↓</span></b></a></span></p>
<p><b></b></p>
<h1>SSH</h1>
<p><span style="color: #000000;"><strong><code class="js plain">1.建立 OpenSSH key   </code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js plain"># pair ssh-keygen -t rsa -b 4096 -C </code><code class="js string">"使用者學號"</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">2.Putty 作為 SSH 連線客戶端工具</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string"># <a href="https://www.putty.org/" style="color: #000000;">https://www.putty.org/</a></code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">3.以 SSH 協定與 Github 連線</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">建立一對 OpenSSH key pair, private key 保留在近端, 將 public key 登記在 Github 所屬帳號設定中</code></strong></span></p>
<p><span style="color: #000000;"><strong># set GIT_SSH=%Disk%:\putty\plink.exe</strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">表示 git 將透過 putty 工具以 ssh 加密協定對 Github 連線</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">4.利用 SSH 對 Gitlab 連線</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">將OpenSSH 格式的 public key 登錄到 Gitlab 帳號下</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">利用 putty.exe 建立 session 名稱為 github.com 的設定, 其中設定 AUTH 與 Proxy 資料</code></strong></span></p>
<p><span style="color: #000000;"><strong><code class="js string">在.git/config 以url = git@gitlab.com:user_name/url 對 gitlab 連接</code></strong></span></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>ssh:網路連線加密機制,可以利用 ssh 帳號@遠端主機 ip 或符號名稱, 就可以輸入認證密碼, 登入到遠端主機,無須提供密碼認證</strong></p>
<h1>Heroku</h1>
<ol>
<li><strong>建立 Heroku 帳號</strong></li>
<li><strong>建立 Heroku app</strong></li>
<li><strong>下載 Heroku CLI 程式檔案, 解開至隨身碟 Y: 所在位置或</strong></li>
<li><strong>修改命令搜尋路徑 --在start.bat中加入:</strong>
<ul style="list-style-type: disc;">
<li><strong><code class="py functions"></code><code class="py functions">set</code><span> </span><code class="py plain">path_heroku</code><code class="py keyword">=</code><code class="py keyword">%</code><code class="py plain">Disk</code><code class="py keyword">%</code><code class="py plain">:\heroku\</code><code class="py functions">bin</code><code class="py plain">;</code><code class="py plain"></code></strong></li>
<li><strong><code class="py plain">path<code class="py keyword">=%path_heroku%;</code></code></strong></li>
<li><strong><code class="py functions">set</code><span> </span><code class="py plain">HTTP_PROXY</code><code class="py keyword">=</code><code class="py plain">http:</code><code class="py keyword">/</code><code class="py keyword">/</code><code class="py plain">[</code><code class="py value">2001</code><code class="py plain">:</code><code class="py value">288</code><code class="py plain">:</code><code class="py value">6004</code><code class="py plain">:</code><code class="py value">17</code><code class="py plain">::</code><code class="py value">53</code><code class="py plain">]:</code><code class="py value">3128</code></strong></li>
<li><strong><code class="py functions"></code><code class="py functions">set</code><span> </span><code class="py plain">HTTPS_PROXY</code><code class="py keyword">=</code><code class="py plain">http:</code><code class="py keyword">/</code><code class="py keyword">/</code><code class="py plain">[</code><code class="py value">2001</code><code class="py plain">:</code><code class="py value">288</code><code class="py plain">:</code><code class="py value">6004</code><code class="py plain">:</code><code class="py value">17</code><code class="py plain">::</code><code class="py value">53</code><code class="py plain">]:</code><code class="py value">3128</code></strong></li>
</ul>
</li>
<li><strong>測試 Heroku </strong>
<ul style="list-style-type: disc;">
<li><strong>#heroku --version</strong></li>
</ul>
</li>
<li><strong>設定 Heroku 代理主機</strong>
<ul style="list-style-type: disc;">
<li><strong>#heroku login -i</strong></li>
</ul>
</li>
<li><strong>設定同步倉儲,進到倉儲位置下 </strong>
<ul style="list-style-type: disc;">
<li><strong>#heroku git:remote -a "heroku app name"</strong></li>
</ul>
</li>
<li><strong>以 git 進行提交推送 </strong>
<ul style="list-style-type: disc;">
<li><strong>#git push heroku </strong></li>
</ul>
</li>
</ol>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>過程中</strong></p>
<ul>
<li><strong>提交推送 #Failed to connect to github.com </strong></li>
</ul>
<p><strong>解決</strong></p>
<ul>
<li><strong><code>git config --global --unset<span> <span>http.proxy</span></span><code class="py plain"><br/></code></code></strong></li>
<li><code><strong>git config --global --unset<span> <span>https.proxy</span></span><code class="py plain"><br/></code></strong></code></li>
</ul>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>之後heroku login，可直接push heroku同步到<a href="https://git.heroku.com/lkh-1.git">https://git.heroku.com/lkh-1.git</a></strong></p>
<p><b>Heroku website:<a href="https://dashboard.heroku.com/apps/lkh-1">https://dashboard.heroku.com/apps/lkh-1</a></b></p>
<p></p>
<h1>LaTeX</h1>
<p><strong>MiKTeX: <a href="https://miktex.org/download">https://miktex.org/download</a></strong></p>
<p><span style="text-decoration: underline;"><strong><span style="background-color: #008080; color: #ffffff;"><a href="https://miktex.org/download/ctan/systems/win32/miktex/setup/windows-x64/basic-miktex-21.6-x64.exe" style="background-color: #008080; color: #ffffff; text-decoration: underline;">Download  ↓</a></span></strong></span></p>
<p><strong>TEXMAKER: <a href="https://www.xm1math.net/texmaker/download.html">https://www.xm1math.net/texmaker/download.html</a></strong></p>
<p><span style="background-color: #008080; color: #ffffff;"><strong><a href="https://www.xm1math.net/texmaker/assets/files/Texmaker_5.0.4_Win_x64.msi" style="background-color: #008080; color: #ffffff; text-decoration: underline;">Download  ↓</a></strong></span></p>
<p><strong>指令參考 <a href="https://bcc16.ncu.edu.tw/7/latex/index.shtml">1.</a> <a href="https://bcc16.ncu.edu.tw/7/latex/math_tex/">2.</a> <a href="https://blog.xuite.net/springman/jobs/60858723-%E5%B0%87%E4%B9%8B%E5%89%8D%E5%AF%AB%E9%81%8E%E7%9A%84+latex+%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86%E4%B8%80%E4%B8%8B">3.</a> <a href="http://www.cs.nthu.edu.tw/~cherung/teaching/2009cs5321/link/latex.pdf">4.</a> <a href="https://www.cs.pu.edu.tw/~wckuo/doc/latex123/node1.html">5.</a></strong></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>只需要安裝 2 個軟件包，MiKTeX 和 Texmaker</strong></p>
<p><strong>Texmaker 是 Latex 的編輯器，MiKTeX 負責編譯指令參考</strong></p><h1>2021 P-TECH 暑期實習</h1>
<p><strong>職缺相關之訊 <a href="https://50733146.github.io/lkh/downloads/2021%20P-TECH%20%E6%9A%91%E6%9C%9F%E5%AF%A6%E7%BF%92%E8%81%B7%E7%BC%BA_updated%200413%20(1).pdf">2021 P-TECH 暑期實習職缺</a></strong></p>
<p><strong>面試履歷 <a href="https://50733146.github.io/lkh/downloads/P-TECH%E5%AF%A6%E7%BF%92%20_%E6%9E%97%E5%86%A0%E6%BE%94_%20(TSS)System%20Services%20Representative%20-X86.pdf">P-TECH實習 _林冠澔_ (TSS)System Services Representative -X86</a></strong></p>
<p><strong>面試主管</strong></p>
<ul>
<li><strong>Ray Chou-TSS Branch Dicector(好像是負責中部地區"台中以南、嘉義以北")</strong></li>
<li><strong>Tasha Chang-Industry Program Manager, IBM Corporate Citizenship</strong></li>
</ul>
<p><strong>面使流程</strong></p>
<ol>
<li><strong>主管自我介紹、在台中分部工作含蓋範圍</strong></li>
<li><strong>自我介紹</strong></li>
<li><strong>問想從這個職缺獲得什麼</strong></li>
<li><strong>問未來的打算(長遠)</strong></li>
<li><strong>問精密機械(本科系)跟IT不同領域的落差如何看待</strong></li>
<li><strong>問對IBM瞭解多少</strong></li>
<li><strong>問對AI瞭解多少</strong></li>
<li><strong>問主管問題(a.工作甚任條件、b.組織未來發展趨勢</strong>
<ol style="list-style-type: lower-alpha;">
<li><strong>因為涵蓋範圍很廣，對知識、技術要求不多，主要是態度、企圖心等等</strong></li>
<li><strong>主要有兩個，分別是AI跟Cloud</strong></li>
</ol>
</li>
<li><strong>問衝突如何解決</strong></li>
<li><strong>End~</strong></li>
</ol>
<p><strong>TSS部門參考資料 <a href="https://50733146.github.io/lkh/downloads/IBM-TSS.pdf">IBM-TSS.pdf</a></strong></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>面試解果-今年疫情取消實習計畫</strong></p>
<h1>插大</h1>
<h2>國立普通大學</h2>
<ul>
<li><strong>成功大學--<a href="https://exam.lib.ncku.edu.tw/index.php?path=exam/%E8%BD%89%E5%AD%B8%E8%80%83(94%E5%AD%B8%E5%B9%B4%E4%BB%A5%E5%BE%8C)" title="考古題">考古題</a><a href="https://exam.lib.ncku.edu.tw/index.php?path=exam/%E8%BD%89%E5%AD%B8%E8%80%83(94%E5%AD%B8%E5%B9%B4%E4%BB%A5%E5%BE%8C)"></a></strong></li>
<li><strong>台灣大學--<a href="https://exam.lib.ntu.edu.tw/undergra">考古題</a></strong></li>
<li><strong>清華大學--<a href="https://www.lib.nthu.edu.tw/library/department/ref/exam/index.html">考古題</a></strong></li>
<li><strong>中央大學--<a href="https://rapid.lib.ncu.edu.tw/cexamn/">考古題</a></strong></li>
<li><strong>中興大學--<a href="http://recruit.nchu.edu.tw/grade-exam/GradeExamQuest.aspx">考古題</a></strong></li>
<li><strong>中正大學--<a href="http://exams.ccu.edu.tw/reference.php">考古題</a></strong></li>
<li><strong>中山大學--<a href="https://lis.nsysu.edu.tw/p/412-1001-2949.php">考古題</a></strong>
<h2>國立科技大學</h2>
</li>
<li><strong>台北科技學--<a href="https://library.ntut.edu.tw/p/412-1024-4005-1.php">考古題</a></strong><strong></strong></li>
</ul>
<h2>私立普通大學</h2>
<p></p>
<ul></ul>
<h2>私立科技大學</h2>
<h1>程式</h1>
<h2>Python</h2>
<p><strong><span>Python是一種廣泛使用的直譯式、進階和通用的程式語言。Python支援多種程式設計範式，包括函數式、指令式、結構化、物件導向和反射式程式。它擁有動態型別系統和垃圾回收功能，能夠自動管理記憶體使用，並且其本身擁有一個巨大而廣泛的標準庫。</span></strong></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong>Python: <a href="https://www.python.org/">https://www.python.org/</a></strong></p>
<p><span style="text-decoration: underline;"><strong><span style="background-color: #008000; color: #ffffff;"><a href="https://www.python.org/downloads/release/python-396/" style="background-color: #008000; color: #ffffff; text-decoration: underline;">Download↓</a></span></strong></span></p>
<p><strong><span style="background-color: #ffffff; color: #000000;">Visual Studio Code: <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></span></strong></p>
<p><strong><span style="text-decoration: underline;"><a href="https://code.visualstudio.com/docs/?dv=win64user"><span style="background-color: #ffffff; color: #000000;"><span style="background-color: #008000; color: #ffffff; text-decoration: underline;">Download↓</span></span></a></span></strong></p>
<p><span style="color: #000000; background-color: #ffffff;"><strong>PyCharm: <a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></strong></span></p>
<p><span style="color: #000000; background-color: #ffffff;"><strong><span style="text-decoration: underline;"><a href="https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows&amp;code=PCC"><span style="background-color: #008000; color: #ffffff; text-decoration: underline;">Download↓</span></a></span></strong></span></p>
<p><strong></strong></p><h3>入門</h3>
<p><strong>有序列表:</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">list=[11,22,33,44,55,66]
print(list[0])
data=[[1,2,3],[4,5,6]]
data[0][0:2]=[3,3,3]
print(data[0])</pre>
<p><strong>集合、字典的運算:</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">s1={1,2,3,4}
s2={3,4,5,6}
s3=s1&amp;s2
#交集:取相同資料
s4=s1|s2
#聯集:區所有資料 但不重複
s5=s1^s2
#反交集:取不重複資料
print(s3)
print(s4)
dic={"apple":"蘋果","bug":"錯誤"}
print(dic)</pre>
<p><strong>流程控制: if , while , for , break , continue , else</strong></p>
<p><strong>函數參數定義: def </strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def io(x,y=0):
    print(x*y)
io(2,2)
io(2)
def avg(*ns):
        #*無限數值
    sum=0
    for m in ns:
        sum=sum+m
    print(sum)
avg(1,2)
avg(1,2,3)
avg(-2,-1,1,2)</pre>
<p><strong>模組設計與使用:</strong></p>
<ul>
<li><strong>模組讀取，import 可以自行創建 or 使用內建模組</strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import point</pre>
<p><strong>檔案讀取和儲存:</strong></p>
<ul>
<li><strong>方法一</strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">file=open("data.txt",mode="w",encoding="utf-8")
file.write("test one more time\n在測試一次",)
file.close()</pre>
<ul>
<li><strong>方法二(較佳)</strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">with open("data.txt",mode="w",encoding="utf-8") as file:
    file.write("4\n6")
sum=0
with open("data.txt",mode="r",encoding="utf-8") as file:
    for line in file:
        sum+=int(line)
print(sum)
</pre>
<p><strong>隨機模組: random</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import random
#隨機模組
data=random.choice([100,75,50,25,0])
#內容隨機
print(data)
data1=random.sample([1,2,3,4,5,6],2)
#內容隨機取多少
print(data1)
data2=[0,2,4,6,8,10,]
random.shuffle(data2)
#隨機換順序
print(data2)
data3=random.random()
#0~1隨機
print(data3)
data4=random.uniform(60,100)
#設定範圍
print(data4)
data5=random.normalvariate(100,10)
#平均數100 標準差10 多數若在90~100之間
print(data5)</pre>
<p><strong>統計模組: statistics as stat</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import statistics as stat 
#統計模組
data=stat.mean([1,4,5,8])
#平均值
print(data)
data1=stat.median([1,2,3,4,5,6,7,100])
#常態分佈
print(data1)
data2=stat.stdev([1,2,3,4,5,6,7,8,100])
#標準差
print(data2)</pre>
<p><strong>類別的定義與使用: </strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">class test:
#定義test
    test1=["test2","test3"]
    def read(test4):
        print("read form",test4)
print(test.test1)
#將word送到test4
test.read("word")</pre>
<p><strong>實體物件建立與使用: 抓取檔案</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">class file:
    #初始化
    def __init__(self,name):
        self.name=name
        self.file=None
    #實體
    def open(self):
        self.file=open(self.name,mode="r",encoding="utf-8")
    def read(self):
        return self.file.read()
#讀取
f1=file("1.txt")
f1.open()
data=f1.read()
print(data) </pre>
<p><strong>類別的定義與使用: </strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">class test:
#定義test
    test1=["test2","test3"]
    def read(test4):
        print("read form",test4)
print(test.test1)
#將word送到test4
test.read("word")</pre>
<p><strong>實體物件建立與使用: 抓取檔案</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">class file:
    #初始化
    def __init__(self,name):
        self.name=name
        self.file=None
    #實體
    def open(self):
        self.file=open(self.name,mode="r",encoding="utf-8")
    def read(self):
        return self.file.read()
#讀取
f1=file("1.txt")
f1.open()
data=f1.read()
print(data) </pre>
<h3>網路爬蟲</h3>
<p><strong>網路連線、抓取資料:</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import urllib.request as request
#網路連線
web="https://ecare.nfu.edu.tw/"
with request.urlopen(web) as response:
    data=response.read().decode("utf-8")
                         #轉"utf-8"
with open("school.txt","w",encoding="utf-8") as file:
#創建檔案
    file.write(data)
    #寫入
print(data)</pre>
<ul>
<li><strong>抓取json檔案且使用json處理</strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import urllib.request as request
#網路連線
import json
#json模組 處理資料
web="https://data.taipei/api/v1/dataset/296acfa2-5d93-4706-ad58-e83cc951863c?scope=resourceAquire"
with request.urlopen(web) as response:
    data=json.load(response)
    #取得資料
clist=data["result"]["results"]
with open("data.txt","w",encoding="utf-8") as file:
#創建檔案
    for company in clist:
        file.write(company["公司名稱"]+"\n")
        #寫入"公司名稱"且換行
#取得"result" "results"資料
print(clist)
for company in clist:
    print(company["公司名稱"]) 
    #抓取"公司名稱"資料</pre>
<ul>
<li><strong>Html網頁--傳統</strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import urllib.request as req
url="https://zh.wikipedia.org/wiki/%E5%8F%B0%E7%81%A3%E6%9C%80%E5%A4%A7%E5%85%AC%E5%8F%B8%E5%88%97%E8%A1%A8"
request=req.Request(url,headers={
    "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
})
#讓網站認定是一個正常的使用者 "User-Agent" F12 Headers可以找到
with req.urlopen(request) as response:
    data=response.read().decode("utf-8")
#上傳這個資料
import bs4
#解析原始碼
root=bs4.BeautifulSoup(data,"html.parser")
titles=root.find_all("td",align="left")
#尋找 "td"
for title in titles:
    if title.a !=None:
#如果標籤包含a (沒有刪除)
        print(title.a.string)</pre>
<ul>
<li><strong>cookie操作、抓取多個頁面</strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import urllib.request as req
def get(url):
    request=req.Request(url,headers={
        "cookie":"over18=1",
        #讓網站確認符合規則(是否18歲)
        "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    })
    #讓網站認定是一個正常的使用者 "User-Agent" F12 Headers可以找到
    with req.urlopen(request) as response:
        data=response.read().decode("utf-8")
    #上傳這個資料
    import bs4
    #解析原始碼
    root=bs4.BeautifulSoup(data,"html.parser")
    titles=root.find_all("div",class_="title")
    print("page",count+1)
    for title in titles:
        if title.a != None:
            print(title.a.string)
    next=root.find("a",string="‹ 上頁")
    return next["href"]
    #把網址丟出去
pageurl="https://www.ptt.cc/bbs/Gossiping/index.html"
count=0
while count&lt;5:
#抓5頁
    pageurl="https://www.ptt.cc"+get(pageurl)
    #執行新網頁
    count+=1</pre>
<ul>
<li><strong>JavaScript網頁--AJAX </strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import urllib.request as req
url="https://www.kkday.com/zh-tw/home/ajax_get_homepage_setting?csrf_token_name=141080c08072037e2cf75502d694d378"
request=req.Request(url,headers={
    "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
})
#讓網站認定是一個正常的使用者 "User-Agent" F12 Headers可以找到
with req.urlopen(request) as response:
    data=response.read().decode("utf-8")
#上傳這個資料
import json
#解析 json格式
data=json.loads(data)
posts=data["data"]["top_products"]["prod_list"]
for key in posts:
    print(key["name"])

</pre>
<ul>
<li><strong>技術複雜的請求--<strong>Request Data、Request Payload、Request Body</strong></strong></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import urllib.request as req
import json
url="https://medium.com/_/graphql"
requsetdata={"operationName":"ExtendedFeedQuery","variables":{"items":[{"postId":"6f87d6f613eb","topicId":""},{"postId":"1eead038c372","topicId":""},{"postId":"ec4123afad8f","topicId":""},{"postId":"389033f164c9","topicId":""},{"postId":"dd65342a833f","topicId":""},{"postId":"9988acde29dd","topicId":""},{"postId":"85e0053c9d3f","topicId":""},{"postId":"b5d46e086b25","topicId":""},{"postId":"ea9f39c7460f","topicId":""},{"postId":"63a511f03d26","topicId":""},{"postId":"377857311d79","topicId":""},{"postId":"96162c148aa9","topicId":""},{"postId":"2c32ceb782cf","topicId":""},{"postId":"368edf009a62","topicId":""},{"postId":"1011e50d31ae","topicId":""},{"postId":"23fcc8772bb3","topicId":""},{"postId":"64d7129fc066","topicId":""},{"postId":"596818712bb6","topicId":""},{"postId":"5316e9337ec4","topicId":""},{"postId":"f20b9367cd52","topicId":""}]},"query":"query ExtendedFeedQuery($items: [ExtendedFeedItemOptions!]!) {\n  extendedFeedItems(items: $items) {\n    post {\n      ...PostListModulePostPreviewData\n      __typename\n    }\n    metadata {\n      topic {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PostListModulePostPreviewData on Post {\n  id\n  firstPublishedAt\n  readingTime\n  createdAt\n  mediumUrl\n  previewImage {\n    id\n    __typename\n  }\n  title\n  collection {\n    id\n    domain\n    slug\n    name\n    navItems {\n      url\n      __typename\n    }\n    logo {\n      id\n      __typename\n    }\n    avatar {\n      id\n      __typename\n    }\n    __typename\n  }\n  creator {\n    id\n    name\n    username\n    imageId\n    mediumMemberAt\n    ...userUrl_user\n    __typename\n  }\n  visibility\n  isProxyPost\n  isLocked\n  ...HomeFeedItem_post\n  ...HomeReadingListItem_post\n  ...HomeTrendingModule_post\n  __typename\n}\n\nfragment HomeFeedItem_post on Post {\n  __typename\n  id\n  title\n  firstPublishedAt\n  mediumUrl\n  collection {\n    id\n    name\n    domain\n    logo {\n      id\n      __typename\n    }\n    __typename\n  }\n  creator {\n    id\n    name\n    username\n    imageId\n    mediumMemberAt\n    __typename\n  }\n  previewImage {\n    id\n    __typename\n  }\n  previewContent {\n    subtitle\n    __typename\n  }\n  readingTime\n  tags {\n    ...TopicPill_tag\n    __typename\n  }\n  ...BookmarkButton_post\n  ...CreatorActionOverflowPopover_post\n  ...PostPresentationTracker_post\n  ...PostPreviewAvatar_post\n}\n\nfragment TopicPill_tag on Tag {\n  __typename\n  id\n  displayTitle\n}\n\nfragment BookmarkButton_post on Post {\n  ...SusiClickable_post\n  ...WithSetReadingList_post\n  ...AddToCatalogBookmarkButton_post\n  __typename\n  id\n}\n\nfragment SusiClickable_post on Post {\n  id\n  mediumUrl\n  ...SusiContainer_post\n  __typename\n}\n\nfragment SusiContainer_post on Post {\n  id\n  __typename\n}\n\nfragment WithSetReadingList_post on Post {\n  ...ReadingList_post\n  __typename\n  id\n}\n\nfragment ReadingList_post on Post {\n  __typename\n  id\n  viewerEdge {\n    id\n    readingList\n    __typename\n  }\n}\n\nfragment AddToCatalogBookmarkButton_post on Post {\n  ...AddToCatalogBase_post\n  __typename\n  id\n}\n\nfragment AddToCatalogBase_post on Post {\n  id\n  viewerEdge {\n    catalogsConnection {\n      catalogsContainingThis(type: LISTS) {\n        catalogId\n        catalogItemIds\n        __typename\n      }\n      predefinedContainingThis {\n        catalogId\n        predefined\n        catalogItemIds\n        __typename\n      }\n      __typename\n    }\n    ...editCatalogItemsMutation_postViewerEdge\n    ...useAddItemToPredefinedCatalog_postViewerEdge\n    __typename\n    id\n  }\n  ...WithToggleInsideCatalog_post\n  __typename\n}\n\nfragment useAddItemToPredefinedCatalog_postViewerEdge on PostViewerEdge {\n  id\n  catalogsConnection {\n    predefinedContainingThis {\n      catalogId\n      version\n      predefined\n      catalogItemIds\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment editCatalogItemsMutation_postViewerEdge on PostViewerEdge {\n  id\n  catalogsConnection {\n    catalogsContainingThis(type: LISTS) {\n      catalogId\n      version\n      catalogItemIds\n      __typename\n    }\n    predefinedContainingThis {\n      catalogId\n      predefined\n      version\n      catalogItemIds\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment WithToggleInsideCatalog_post on Post {\n  id\n  viewerEdge {\n    catalogsConnection {\n      catalogsContainingThis(type: LISTS) {\n        catalogId\n        __typename\n      }\n      predefinedContainingThis {\n        predefined\n        __typename\n      }\n      __typename\n    }\n    __typename\n    id\n  }\n  __typename\n}\n\nfragment CreatorActionOverflowPopover_post on Post {\n  allowResponses\n  id\n  statusForCollection\n  isLocked\n  isPublished\n  clapCount\n  mediumUrl\n  pinnedAt\n  pinnedByCreatorAt\n  curationEligibleAt\n  mediumUrl\n  responseDistribution\n  visibility\n  ...useIsPinnedInContext_post\n  pendingCollection {\n    id\n    name\n    creator {\n      id\n      __typename\n    }\n    avatar {\n      id\n      __typename\n    }\n    domain\n    slug\n    __typename\n  }\n  creator {\n    id\n    ...MutePopoverOptions_creator\n    ...auroraHooks_publisher\n    __typename\n  }\n  collection {\n    id\n    name\n    creator {\n      id\n      __typename\n    }\n    avatar {\n      id\n      __typename\n    }\n    domain\n    slug\n    ...MutePopoverOptions_collection\n    ...auroraHooks_publisher\n    __typename\n  }\n  ...ClapMutation_post\n  __typename\n}\n\nfragment MutePopoverOptions_creator on User {\n  id\n  __typename\n}\n\nfragment MutePopoverOptions_collection on Collection {\n  id\n  __typename\n}\n\nfragment ClapMutation_post on Post {\n  __typename\n  id\n  clapCount\n  ...MultiVoteCount_post\n}\n\nfragment MultiVoteCount_post on Post {\n  id\n  ...PostVotersNetwork_post\n  __typename\n}\n\nfragment PostVotersNetwork_post on Post {\n  id\n  voterCount\n  recommenders {\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment useIsPinnedInContext_post on Post {\n  id\n  collection {\n    id\n    __typename\n  }\n  pendingCollection {\n    id\n    __typename\n  }\n  pinnedAt\n  pinnedByCreatorAt\n  __typename\n}\n\nfragment auroraHooks_publisher on Publisher {\n  __typename\n  ... on Collection {\n    isAuroraEligible\n    isAuroraVisible\n    viewerEdge {\n      id\n      isEditor\n      __typename\n    }\n    __typename\n    id\n  }\n  ... on User {\n    isAuroraVisible\n    __typename\n    id\n  }\n}\n\nfragment PostPresentationTracker_post on Post {\n  id\n  visibility\n  previewContent {\n    isFullContent\n    __typename\n  }\n  collection {\n    id\n    slug\n    __typename\n  }\n  __typename\n}\n\nfragment PostPreviewAvatar_post on Post {\n  __typename\n  id\n  collection {\n    id\n    name\n    ...CollectionAvatar_collection\n    ...collectionUrl_collection\n    __typename\n  }\n  creator {\n    id\n    username\n    name\n    ...UserAvatar_user\n    ...userUrl_user\n    __typename\n  }\n}\n\nfragment CollectionAvatar_collection on Collection {\n  name\n  avatar {\n    id\n    __typename\n  }\n  ...collectionUrl_collection\n  __typename\n  id\n}\n\nfragment collectionUrl_collection on Collection {\n  id\n  domain\n  slug\n  __typename\n}\n\nfragment UserAvatar_user on User {\n  __typename\n  username\n  id\n  name\n  imageId\n  mediumMemberAt\n  ...userUrl_user\n}\n\nfragment userUrl_user on User {\n  __typename\n  id\n  customDomainState {\n    live {\n      domain\n      __typename\n    }\n    __typename\n  }\n  username\n  hasSubdomain\n}\n\nfragment HomeReadingListItem_post on Post {\n  id\n  title\n  creator {\n    id\n    name\n    username\n    ...UserAvatar_user\n    __typename\n  }\n  mediumUrl\n  createdAt\n  readingTime\n  collection {\n    id\n    name\n    navItems {\n      url\n      __typename\n    }\n    ...CollectionAvatar_collection\n    __typename\n  }\n  visibility\n  __typename\n}\n\nfragment HomeTrendingModule_post on Post {\n  id\n  ...HomeTrendingPostPreview_post\n  __typename\n}\n\nfragment HomeTrendingPostPreview_post on Post {\n  id\n  title\n  mediumUrl\n  readingTime\n  firstPublishedAt\n  ...PostPreviewAvatar_post\n  ...PostPresentationTracker_post\n  __typename\n}\n"}
#複雜的請求 在Request Payload "view source" 可找到 給網站訊息
request=req.Request(url,headers={
        "Content-type":"application/json",
        #在Request Headers
        "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}, data=json.dumps(requsetdata).encode("utf-8"))
with req.urlopen(request) as response:
        result=response.read().decode("utf-8")
result=json.loads(result)
titles=result["data"]["extendedFeedItems"]
for title in titles:
#連續讀取
        print(title["post"]["title"])
</pre>
<h3>Email 發送電子郵件</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import email.message
msg=email.message.EmailMessage()
msg["from"]="寄件人"
msg["to"]="收件人"
msg["subject"]="主旨"
msg.set_content("test")
#msg 送出資訊與內容
import smtplib
#到網路收尋 gmail.smtp server 或是其他 ex:yahoo...
server=smtplib.SMTP_SSL("smtp.gmail.com", 465)
server.login("帳號", "密碼")
#填入帳號密碼登入
server.send_message(msg)
server.close</pre>
<p></p>
<h3>Flask 網站開發</h3>
<ul>
<li>app.py</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return 'hello man'
@app.route('/hi')
def hi():
    return 'Hi，'
if __name__ == 'main__':
 app.run()</pre>
<p></p>
<ul>
<li>runtime.txt</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">python-3.7.11</pre>
<ul>
<li>requirements.txt</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Flask
gunicorn</pre>
<ul>
<li>Rrocfile</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">web gunicorn app:app</pre>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p>可以部署到 Heroku or Github</p>
<p><span>Heroku: <a href="https://git.heroku.com/python-practice-learn.git">https://git.heroku.com/python-practice-learn.git</a></span></p>
<ul>
<li><span>步驟:</span></li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku login -i
</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">cd your-project</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git init
</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku git:clone -a your_app_name</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git add .</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git commit -am "information"</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git push heroku master</pre>
<p>部屬位於: <a href="https://git.heroku.com/python-practice-learn.git">https://git.heroku.com/your-app-name.git</a><br/>網址: <a href="https://your-app-name.herokuapp.com/">https://your-app-name.herokuapp.com/</a><br/><br/></p>
<ul>
<li>編輯:</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku login -i</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku git:clone -a your-app-name</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">cd your-app-name</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git add .</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git commit -a "information"
</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git push heroku master</pre>
<p><br/><br/><br/><br/><br/><br/></p>
<h3>Pandas 資料分析</h3>
<p><span>在計算機編程中，pandas是Python程式語言的用於數據操縱和分析的軟體庫。特別是，它提供操縱數值表格和時間序列的資料結構和運算操作。它是在三條款BSD許可證下發行的自由軟體。它的名字衍生自術語「面板數據」，這是計量經濟學的數據集術語，它們包括了對同一個體的在多個時期上的觀測。</span></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<p><strong><span>參考: </span></strong></p>
<p><strong><span><a href="https://oranwind.org/python-pandas-ji-chu-jiao-xue/">https://oranwind.org/python-pandas-ji-chu-jiao-xue/</a></span></strong></p>
<p><a href="https://www.youtube.com/watch?v=B5BgPWBZhvY&amp;list=PL-g0fdC5RMboYEyt6QS2iLb_1m7QcgfHk&amp;index=29" title="https://www.youtube.com/watch?v=B5BgPWBZhvY&amp;list=PL-g0fdC5RMboYEyt6QS2iLb_1m7QcgfHk&amp;index=29"><b>https://www.youtube.com/watch?v=B5BgPWBZhvY&amp;list=PL-g0fdC5RMboYEyt6QS2iLb_1m7QcgfHk&amp;index=29</b></a></p>
<p><b> </b></p>
<h3>Numpy</h3>
<p><span>NumPy是Python語言的一個擴充程式庫。支援高階大量的維度陣列與矩陣運算，此外也針對陣列運算提供大量的數學函式函式庫。</span></p>
<p><strong><span>--------------------------------------------------------------------------------------------------</span></strong></p>
<h2>Html</h2>
<p></p>
<p><svg height="20" width="92" xmlns="http://www.w3.org/2000/svg"><lineargradient id="b" x2="0" y2="100%"><stop offset="0" stop-color="#bbb" stop-opacity=".1"></stop><stop offset="1" stop-opacity=".1"></stop></lineargradient><mask id="a"><rect fill="#fff" height="20" rx="3" width="92"></rect></mask><g mask="url(#a)"><path d="M0 0h34v20H0z" fill="#555"></path><path d="M34 0h58v20H34z" fill="#46BC99"></path><path d="M0 0h92v20H0z" fill="url(#b)"></path></g><g fill="#fff" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11" text-anchor="middle"><text fill="#010101" fill-opacity=".3" x="17" y="15">chat</text><text x="17" y="14">web</text><text fill="#010101" fill-opacity=".3" x="62" y="15">on LKH</text><text x="62" y="14">on LKH</text></g></svg></p>
<p><br/><br/></p>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;svg xmlns="http://www.w3.org/2000/svg" width="92" height="20"&gt;&lt;linearGradient id="b" x2="0" y2="100%"&gt;&lt;stop offset="0" stop-color="#bbb" stop-opacity=".1"/&gt;&lt;stop offset="1" stop-opacity=".1"/&gt;&lt;/linearGradient&gt;&lt;mask id="a"&gt;&lt;rect width="92" height="20" rx="3" fill="#fff"/&gt;&lt;/mask&gt;&lt;g mask="url(#a)"&gt;&lt;path fill="#555" d="M0 0h34v20H0z"/&gt;&lt;path fill="#46BC99" d="M34 0h58v20H34z"/&gt;&lt;path fill="url(#b)" d="M0 0h92v20H0z"/&gt;&lt;/g&gt;&lt;g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11"&gt;&lt;text x="17" y="15" fill="#010101" fill-opacity=".3"&gt;chat&lt;/text&gt;&lt;text x="17" y="14"&gt;web&lt;/text&gt;&lt;text x="62" y="15" fill="#010101" fill-opacity=".3"&gt;on LKH&lt;/text&gt;&lt;text x="62" y="14"&gt;on LKH&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;</pre>
<p><br/><br/></p>
<p></p>
<p><svg height="130" width="500"> <defs> <lineargradient id="grad1" x1="0%" x2="100%" y1="0%" y2="0%"> <stop offset="0%" style="stop-color: #ffff00; stop-opacity: 1;"></stop> <stop offset="100%" style="stop-color: #ff0000; stop-opacity: 1;"></stop> </lineargradient> </defs> <ellipse cx="100" cy="70" fill="url(#grad1)" rx="85" ry="55"></ellipse> <text fill="#ffffff" font-family="Verdana" font-size="45" x="56" y="86">LKH</text> Sorry, your browser does not support inline LKH. </svg></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;svg height="130" width="500"&gt;
  &lt;defs&gt;
    &lt;linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%"&gt;
      &lt;stop offset="0%" style="stop-color:rgb(255,255,0);stop-opacity:1" /&gt;
      &lt;stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" /&gt;
    &lt;/linearGradient&gt;
  &lt;/defs&gt;
  &lt;ellipse cx="100" cy="70" rx="85" ry="55" fill="url(#grad1)" /&gt;
  &lt;text fill="#ffffff" font-size="45" font-family="Verdana" x="56" y="86"LKH&lt;/text&gt;
  Sorry, your browser does not support inline LKH.
&lt;/svg&gt;</pre>
<p></p>
<p></p>
<h2>Java</h2><h2>SQL</h2>
<h2>C++</h2>
<h1>Tensorflow</h1>
<p><strong>TensorFlow是一個開源軟體庫，用於各種感知和語言理解任務的機器學習。目前被50個團隊用於研究和生產許多Google商業產品，如語音辨識、Gmail、Google 相簿和搜尋，其中許多產品曾使用過其前任軟體DistBelief。</strong></p>
<p><strong>--------------------------------------------------------------------------------------------------</strong></p>
<p><strong>Anaconda: <a href="https://www.anaconda.com/">https://www.anaconda.com/</a></strong></p>
<p><strong><span style="color: #ffffff; background-color: #008000;"><a href="https://repo.anaconda.com/archive/Anaconda3-2021.05-Windows-x86_64.exe" style="color: #ffffff; background-color: #008000;">Download↓</a></span></strong></p>
<p><strong><span style="color: #ffffff; background-color: #008000;"></span></strong></p>
<p><strong></strong><strong>建立 TensorFlow 的虛擬環境:</strong></p>
<p style="padding-left: 30px;"><strong>將 Anaconda Prompt 以管理員身分開啟</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">conda create -n tensorflowenv python=3.7 anaconda</pre>
<p style="padding-left: 30px;"><strong>安裝完成後虛擬環境實體位置在 </strong></p>
<p style="padding-left: 30px;"><strong></strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">C:\ProgramData\Anaconda3\envs\</pre>
<p style="padding-left: 30px;"><strong>切換到 tensorflowenv 虛擬環境</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">activate tensorflowenv
</pre>
<p style="padding-left: 30px;"><strong>安裝 TensorFlow &amp; keras</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">pip install tensorflow
</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">pip install keras
</pre>
<p style="padding-left: 30px;"><strong>關閉虛擬環境回到原來 Python 環境</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">deactivate</pre>
<p><strong>--------------------------------------------------------------------------------------------------</strong></p>
<p><strong><a href="https://www.tensorflow.org/?hl=zh-tw">https://www.tensorflow.org/?hl=zh-tw</a></strong></p>